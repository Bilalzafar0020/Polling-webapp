
@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&family=Lobster&family=Poppins:wght@400;500&family=Tsukimi+Rounded:wght@400;500&display=swap');


*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'IBM Plex Sans', sans-serif;
font-family: 'Lobster', cursive;
font-family: 'Poppins', sans-serif;
font-family: 'Tsukimi Rounded', sans-serif;
}
body{
    background-color: #b5dcf3; /*  #e2e8f0*/
    height: 100%;
    max-width: 100%;
  overflow: auto;
}
header{
    display: flex;
    flex-direction: row;
    justify-content:space-between;
    align-items:center;
    background-color: #fffffff3;
    max-width: 100vw;
    height: 11vh;
    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.3);
}
#out{
    height: 2.5rem;
    width: 2.6rem;
    border-radius: 5rem;
    cursor: pointer;
    border: none;
    outline:#cbe2ff;
margin-left: 66%;
}
#out:hover{
    transform: scale(1.1);
}
h2.heading{
    margin-top: 0.3rem;
    font-size: 29px;
    font-weight:560;
    margin-left: 1rem;
    color: rgb(0, 0, 255);
    font-family: sans-serif;
}
.alert {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40%;
    padding: 10px;
    background-color: #4beb2b;
    color: #000000;
    font-weight: bold;
    text-align: center;
    transition: opacity 0.5s;
    border-radius: 5px;
    z-index: 9999;
  }
  
  .alert.hide {
    opacity: 0;
  }
  
main{
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    /* margin-left: 80px;
    margin-right: 90px; */
    margin-top: 30px;
}
.pbutton {
    cursor: pointer;
    color: #ffffff;
    background-color: #00aaff;
    border-radius: 5px;
    width: 8rem;
    height: 3.8rem;
    border: none;
    outline: none;
    font-size: 14px;
    letter-spacing: 2px;
    font-weight: 580;
    position: relative;
    overflow: hidden;
    transition: background-color 0.3s ease-in-out, transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275), box-shadow 0.3s ease-in-out;
  }
  
  .pbutton:before {
    content: "";
    position: absolute;
    top: -20px;
    left: -20px;
    right: -20px;
    bottom: -20px;
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  
  .pbutton:hover {
    transform: scale(1.05);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    background-color: #0099ff;
  }
  
  .pbutton:hover:before {
    opacity: 1;
  }
 
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*----------------------------------------   header area media query        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

@media all and (max-width:1260px)  and (min-width: 1030px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 26px;
    }
    .logo{
        margin-left: 4px;
        width: 39px;
        height: 39px;
    } 
    #out{
    margin-left: 63%;
    }
}

@media all and (max-width:1030px)  and (min-width: 847px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 22px;
    }
    .logo{
        margin-left: 6px;
        width: 36px;
        height: 36px;
    } 
    #out{
    margin-left: 63%;
    }
}

@media all and (max-width:847px)  and (min-width: 780px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 19px;
    }
    .logo{
        margin-left: 2px;
        width: 34px;
        height: 34px;
    } 
    #out{
    margin-left: 60%;
    }
}
@media all and (max-width:780px)  and (min-width: 590px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 16px;
    }
    .logo{
        margin-left: -3px;
        width: 28px;
        height: 28px;
    } 
    #out{
    margin-left: 58%;
    }
    header{
        height: 9vh;
    }
    #out{
        height: 1.8rem;
        width: 2rem;
    }
    img#profile{
        width:35px ;
        height:34px
    }
}
@media all and (max-width:590px)  and (min-width: 510px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 14px;
    }
    .logo{
        margin-left: -3px;
        width: 24px;
        height: 24px;
    } 
    #out{
    margin-left: 55%;
    }
    header{
        height: 9vh;
    }
    #out{
        height: 1.8rem;
        width: 2rem;
    }
    img#profile{
        width:31px ;
        height:32px
    }
}
@media all and (max-width:510px)  and (min-width: 446px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 14px;
    }
    .logo{
        margin-left: 3px;
        width: 19px;
        height: 19px;
    } 
    #out{
    margin-left: 52%;
    }
    header{
        height: 8.5vh;
    }
    #out{
        height: 1.8rem;
        width: 1.8rem;
        margin-top: 3px;
    }
    img#profile{
        width:27px ;
        height:29px
    }
}
@media all and (max-width:446px)  and (min-width: 360px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 10px;
    }
    .logo{
        margin-left: -4px;
        width: 15px;
        height: 15px;
    } 
    #out{
    margin-left: 52%;
    }
    header{
        height: 8vh;
    }
    #out{
        height: 1.8rem;
        width: 1.8rem;
        margin-top: 3px;
    }
    img#profile{
        width:27px ;
        height:29px
    }
}
@media all and (max-width:360px)  and (min-width: 320px){
    h2.heading{
        margin-top: 0.3rem;
        font-size: 8px;
    }
    .logo{
        margin-left: -4px;
        width: 13px;
        height: 13px;
    } 
    #out{
    margin-left: 48%;
    }
    header{
        height: 8vh;
    }
    #out{
        height: 1.8rem;
        width: 1.8rem;
        margin-top: 3px;
    }
    img#profile{
        width:27px ;
        height:29px
    }
}

 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*---------------------------------------- dynamically creating js css        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
 /*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

.poll{
    background-color: #ffffff;
    width: 70%;
    height: 16.2rem;
    padding-top: 13px;  /* 1px*/
    padding-left: 15px;
    padding-bottom: 8px;
    display: flex;
    flex-direction: column;
    /* justify-content: space-evenly; */
    gap: 17px; /*20px */
    padding-right: 6px;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(41, 128, 185, 0.3);

}

.inputs{
    color: #14171a;
    font-weight: bolder;
    letter-spacing: 1px;
    width: 100%;
    background-color: #ffffff;
    border: none;
    outline: none;
    font-size: large;
}
.optionLabel{
margin-left: 9px;
}

.voteButton{
width: 7%;
height: 38px;
cursor: pointer;
background-color: #7090e7;
color: #ffffff;
outline: none;
border: none;
border-radius: 5px;
margin-left: 90%;
transition: background-color 0.3s ease-in-out, transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275), box-shadow 0.3s ease-in-out;
}
  
  .voteButton:hover {
    transform: scale(1.05);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    background-color: #0099ff;
  }
  
 .optionLabel{
color: #000000;
text-transform: capitalize;
font-size: medium;
font-weight: 510;
 }



 .pollBar {
    height: 10px;
    background-color: #28ad60;
    margin-top: 5px;
  }
  .percentageLabel {
    display: inline-block;
    margin-left: 10px;
    font-weight: bold;
  }


/*  

{
  label: "Poll label",
  options: ["Option 1", "Option 2", "Option 3", "Option 4"],
  percentages: [0, 0, 0, 0],
  votes: {
    [userUID]: selectedOptionIndex
  }
}
Here's a breakdown of the fields:

label: A string representing the label of the poll.
options: An array of strings representing the available options for the poll.
percentages: An array of numbers representing the percentage of votes for each option.
votes: An object where each key represents the user's UID (unique identifier) and the value represents the index of the selected option.

*/






/*   

// Updating the retrieveData function to append polls to the polls container
let retrieveData = async function() {
  const querySnapshot = await getDocs(collection(db, 'polls'));

  querySnapshot.forEach((docum) => {
    const pollData = docum.data();
    const pollId = docum.id;

    // a poll container
    const pollDiv = document.createElement('div');
    pollDiv.classList.add('poll');
    pollDiv.style.marginBottom = '20px';



    // a poll label input
    const pollLabel = document.createElement('input');
    pollLabel.type = 'text';
    pollLabel.value = pollData.label;
    pollLabel.disabled = true;
    pollLabel.classList.add('inputs');

    // Append poll label input;
    pollDiv.appendChild(pollLabel);



    // a poll options
    pollData.options.forEach((option) => {
      // Creating option container
      const optionDiv = document.createElement('div');
optionDiv.classList.add('optionsDiv');


      // Creating checkbox
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
checkbox.classList.add('checkboxes');

      // Creating  checkbox option label
      const optionLabel = document.createElement('label');
      optionLabel.textContent = option;
optionLabel.classList.add('optionLabel')


// Creating percentage label
const percentageLabel = document.createElement('span');
percentageLabel.classList.add('percentageLabel');

      // Append checkbox and option label to option container
      optionDiv.appendChild(checkbox);
      optionDiv.appendChild(optionLabel);
optionDiv.appendChild(percentageLabel);
      // Append option container to poll container
      pollDiv.appendChild(optionDiv);

      
    });

   



//   vote button
let vote = document.createElement('button');
vote.classList.add('voteButton')
vote.textContent = 'Vote';

// ...

// Add event listener to the vote button
vote.addEventListener('click', () => {
  const checkboxes = pollDiv.querySelectorAll('.checkboxes');
  const selectedOptions = [];

  checkboxes.forEach((checkbox, index) => {
    if (checkbox.checked) {
      selectedOptions.push(index);
    }
  });

  const pollRef = doc(db, 'polls', pollId);

  // Update the percentages in Firestore
  updateDoc(pollRef, { percentages: getUpdatedPercentages(selectedOptions) })
    .then(() => {
      showAlert('Vote submitted successfully');

      // Retrieve the updated poll data from Firestore
      doc(pollRef)
        .get()
        .then((doc) => {
          if (doc.exists()) {
            const updatedPollData = doc.data();

            // Clear the existing percentage labels
            const percentageLabels = pollDiv.querySelectorAll('.percentageLabel');
            percentageLabels.forEach((label) => {
              label.remove();
            });

            // Display the updated percentages in the UI
            const optionDivs = pollDiv.querySelectorAll('.optionsDiv');
            optionDivs.forEach((optionDiv, index) => {
              const percentageLabel = document.createElement('span');
              percentageLabel.textContent = `${updatedPollData.percentages[index]}%`;
              percentageLabel.classList.add('percentageLabel');

              optionDiv.appendChild(percentageLabel);
            });
          }
        })
        .catch((error) => {
          showAlert('Failed to retrieve updated poll data');
          console.error('Error retrieving updated poll data:', error);
        });
    })
    .catch((error) => {
      showAlert('Failed to submit vote');
      console.error('Error updating vote:', error);
    });
});

// ...


pollDiv.appendChild(vote)


 // Append poll container to poll div 
 pollsContainer.appendChild(pollDiv);
});
function getUpdatedPercentages(selectedOptions) {
  const percentages = [0, 0, 0, 0];

  // Calculate the total number of selected options
  const totalSelected = selectedOptions.length;

  // Increment the count for each selected option
  selectedOptions.forEach((index) => {
    percentages[index]++;
  });

  // Calculate the percentages based on the total selected
  percentages.forEach((count, index) => {
    percentages[index] = (count / totalSelected) * 100;
  });

  return percentages;
}

}


*/

















/*
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /polls/{poll} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}

*/


/*  now i want that when user click on vote button and then if user check on any check box (only then) make a poll bar like (linkdin-facebook pools) which increase according to users checked (like if user check on that checkbox it increase accordingly ) + having percentage of that like 70% 30% according to users check on particulary checkbox the pollbar should be inline of the (option lable)and 
the percentage should be with the poll bar and the poll bar should a width according to (poll div)*/ 



/* 




the percentages should be updated in Firestore, and after a successful update, the updated percentages should be retrieved and displayed as labels next to each checkbox option label ( present in the above code ) in the UI.








